module.exports = /* eslint-disable */ [{"name":"EyeIcon","description":"SVG Eye Icon","code":"import React from \"react\";\n\n/** SVG Eye Icon */\nfunction EyeIcon() {\n    // Attribution: Fabi√†n Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\n    return (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"32\" width=\"32\" viewBox=\"0 0 22 22\"><g transform=\"matrix(.02146 0 0 .02146 1 1)\" fill=\"#4d4d4d\"><path d=\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\"/><circle cx=\"466.08\" cy=\"466.02\" r=\"134.5\"/></g></svg>\n    )\n}\n\nexport default EyeIcon;","examples":[{"name":"Example","description":"","code":"import React from \"react\";\nimport EyeIcon from \"cc-ss-components/EyeIcon\";\n\nexport default function EyeIconExample() {\n    return <EyeIcon />;\n}"}]},{"name":"HelloWorld","description":"A cliche component that says Hello with a custom message.","props":{"message":{"type":{"name":"string"},"required":false,"description":"Displays message","defaultValue":{"value":"\"World\"","computed":false}}},"code":"import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n/** A cliche component that says Hello with a custom message. */\nfunction HelloWorld({message}) {\n    return <div>Hello {message}</div>;\n}\n\nHelloWorld.propTypes = {\n    /** Displays message */\n    message: PropTypes.string\n};\n\nHelloWorld.defaultProps = {\n    message: \"World\"\n};\n\nexport default HelloWorld;","examples":[{"name":"ExampleHelloWorld","description":"Custom Message","code":"import React from \"react\";\nimport HelloWorld from \"cc-ss-components/HelloWorld\";\n\n/** Custom Message */\nexport default function ExampleHelloWorld() {\n    return <HelloWorld message=\"Dear Hackers!\" />;\n}"}]},{"name":"Label","description":"Label with required field display, htmlFor, and block styling","props":{"htmlFor":{"type":{"name":"string"},"required":true,"description":"HTML ID for associated input"},"label":{"type":{"name":"string"},"required":true,"description":"Label text"},"required":{"type":{"name":"bool"},"required":false,"description":"Display asterisk after label if true"}},"code":"import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n/** Label with required field display, htmlFor, and block styling */\nfunction Label({htmlFor, label, required}) {\n    return (\n        <label style={{display: \"block\"}} htmlFor={htmlFor}>\n            {label} {required && <span style={{color: \"red\"}}> *</span>}\n        </label>\n    )\n}\n\nLabel.propTypes = {\n    /** HTML ID for associated input */\n    htmlFor: PropTypes.string.isRequired,\n    /** Label text */\n    label: PropTypes.string.isRequired,\n    /** Display asterisk after label if true */\n    required: PropTypes.bool\n};\n\nexport default Label;","examples":[{"name":"ExampleOptional","description":"Optional label","code":"import React from \"react\";\nimport Label from \"cc-ss-components/Label\";\n\n/** Optional label */\nexport default function ExampleOptional() {\n    return <Label htmlFor=\"foo\" label=\"Bar\" />\n}"},{"name":"ExampleRequired","description":"Required label","code":"import React from \"react\";\nimport Label from \"cc-ss-components/Label\";\n\n/** Required label */\nexport default function ExampleRequired() {\n    return <Label htmlFor=\"foo\" label=\"Bar\" required />\n}"}]},{"name":"PasswordInput","description":"Password input with integrated label, quality tips, and show password toggle.","props":{"htmlId":{"type":{"name":"string"},"required":true,"description":"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing."},"name":{"type":{"name":"string"},"required":true,"description":"Input name. Recommend setting this to match object's property so a single change handler can be used by convention."},"value":{"type":{"name":"any"},"required":false,"description":"Password value"},"label":{"type":{"name":"string"},"required":false,"description":"Input label","defaultValue":{"value":"\"Password\"","computed":false}},"onChange":{"type":{"name":"func"},"required":true,"description":"Function called when password input value changes"},"maxLength":{"type":{"name":"number"},"required":false,"description":"Max password length accepted","defaultValue":{"value":"50","computed":false}},"minLength":{"type":{"name":"number"},"required":false,"description":"Min password length accepted","defaultValue":{"value":"8","computed":false}},"placeholder":{"type":{"name":"string"},"required":false,"description":"Placeholder displayed when no password is entered"},"showVisibilityToggle":{"type":{"name":"bool"},"required":false,"description":"Set to true to show the toggle for displaying the currently entered password","defaultValue":{"value":"false","computed":false}},"quality":{"type":{"name":"number"},"required":false,"description":"Display password quality visually via ProgressBar, accepts a number between 0 and 100"},"error":{"type":{"name":"string"},"required":false,"description":"Validation error to display"}},"code":"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ProgressBar from \"../ProgressBar\";\nimport EyeIcon from \"../EyeIcon\";\nimport TextInput from \"../TextInput\";\n\n/** Password input with integrated label, quality tips, and show password toggle. */\nclass PasswordInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            showPassword: false\n        };\n    }\n    toggleShowPassword = e => {\n        this.setState(prevState => {\n            return { showPassword: !prevState.showPassword };\n        });\n        if (e) {\n            e.preventDefault();\n        }\n    }\n    render() {\n        const {htmlId, value, label, error, onChange, placeholder, minLength, maxLength, showVisibilityToggle, quality, ...props} = this.props;\n        const {showPassword} = this.state;\n\n        return (\n            <TextInput htmlId={htmlId} label={label} placeholder={placeholder} type={showPassword ? \"text\" : \"password\"} onChange={onChange} value={value} maxLength={maxLength} minLength={minLength} error={error} required {...props}>\n            {showVisibilityToggle && <a href=\"\" onClick={this.toggleShowPassword} style={{marginLeft: 5}}><EyeIcon /></a>}\n            {value.length > 0 && quality && <ProgressBar percent={quality} width={130} /> }\n            </TextInput>\n        )\n    }\n}\n\nPasswordInput.propTypes = {\n    /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n    htmlId: PropTypes.string.isRequired,\n    /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention. */\n    name: PropTypes.string.isRequired,\n    /** Password value */\n    value: PropTypes.any,\n    /** Input label */\n    label: PropTypes.string,\n    /** Function called when password input value changes */\n    onChange: PropTypes.func.isRequired,\n    /** Max password length accepted */\n    maxLength: PropTypes.number,\n    /** Min password length accepted */\n    minLength: PropTypes.number,\n    /** Placeholder displayed when no password is entered */\n    placeholder: PropTypes.string,\n    /** Set to true to show the toggle for displaying the currently entered password */\n    showVisibilityToggle: PropTypes.bool,\n    /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\n    quality: PropTypes.number,\n    /** Validation error to display */\n    error: PropTypes.string\n};\n\nPasswordInput.defaultProps = {\n    maxLength: 50,\n    minLength: 8,\n    showVisibilityToggle: false,\n    label: \"Password\"\n};\n\nexport default PasswordInput;","examples":[{"name":"ExampleAllFeatures","description":"All features enabled","code":"import React from \"react\";\nimport PasswordInput from \"cc-ss-components/PasswordInput\";\n\n/** All features enabled */\nclass ExampleAllFeatures extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            password: \"\"\n        };\n    }\n    getQuality = () => {\n        const length = this.state.password.length;\n        return length > 10 ? 100 : length * 10;\n    }\n    render() {\n        return (\n            <div>\n                <PasswordInput\n                   htmlId=\"password-input-example-all-features\"\n                   name=\"password\"\n                   onChange={e => this.setState({password: e.target.value})}\n                   value={this.state.password}\n                   minLength={10}\n                   placeholder=\"Enter password\"\n                   showVisibilityToggle\n                   quality={this.getQuality()}\n                   {...this.props} />\n            </div>\n        )\n    }\n}\n\nexport default ExampleAllFeatures;"}]},{"name":"ProgressBar","description":"Progress bar component with percent completion, bar width and height props","props":{"percent":{"type":{"name":"number"},"required":true,"description":"Percent of progress completed"},"width":{"type":{"name":"number"},"required":true,"description":"Bar width"},"height":{"type":{"name":"number"},"required":false,"description":"Bar height","defaultValue":{"value":"5","computed":false}}},"code":"import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n/** Progress bar component with percent completion, bar width and height props*/\nclass ProgressBar extends React.Component {\n    getColor = percent => {\n        if (percent === 100) {\n            return \"green\";\n        }\n        return percent > 50 ? \"lightgreen\" : \"red\";\n    }\n    getWidthAsPercentOfTotalWidth = () => {\n        return parseInt(this.props.width * (this.props.percent / 100), 10);\n    }\n    render() {\n        const {percent, width, height} = this.props;\n\n        return (\n            <div style={{border: \"1px solid lightgray\", width}}>\n                <div style={{width: this.getWidthAsPercentOfTotalWidth(), height, backgroundColor: this.getColor(percent)}} />\n            </div>\n        )\n    }\n}\n\nProgressBar.propTypes = {\n    /** Percent of progress completed */\n    percent: PropTypes.number.isRequired,\n    /** Bar width */\n    width: PropTypes.number.isRequired,\n    /** Bar height */\n    height: PropTypes.number\n};\n\nProgressBar.defaultProps = {\n    height: 5\n};\n\nexport default ProgressBar;","examples":[{"name":"Example100Percent","description":"100% progress and height 20px","code":"import React from \"react\";\nimport ProgressBar from \"cc-ss-components/ProgressBar\";\n\n/** 100% progress and height 20px */\nexport default function Example100Percent() {\n    return <ProgressBar percent={100} height={20} width={150} />\n}"},{"name":"Example10Percent","description":"10% progress","code":"import React from \"react\";\nimport ProgressBar from \"cc-ss-components/ProgressBar\";\n\n/** 10% progress */\nexport default function Example10Percent() {\n    return <ProgressBar percent={10} width={150} />\n}"},{"name":"Example70Percent","description":"70% progress","code":"import React from \"react\";\nimport ProgressBar from \"cc-ss-components/ProgressBar\";\n\n/** 70% progress */\nexport default function Example70Percent() {\n    return <ProgressBar percent={70} width={150} />\n}"}]},{"name":"RegistrationForm","description":"Registration form with built-in validation","props":{"confirmationMessage":{"type":{"name":"string"},"required":false,"description":"Message displayed upon successful submission","defaultValue":{"value":"\"Thanks for registering!\"","computed":false}},"onSubmit":{"type":{"name":"func"},"required":true,"description":"Called when form is submitted"},"minPasswordLength":{"type":{"name":"number"},"required":false,"description":"Minimum password length","defaultValue":{"value":"8","computed":false}}},"code":"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport TextInput from \"../TextInput\";\nimport PasswordInput from \"../PasswordInput\";\n\n/** Registration form with built-in validation */\nclass RegistrationForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            user: {\n                email: \"\",\n                password: \"\"\n            },\n            errors: {},\n            submitted: false\n        };\n    }\n    onChange = e => {\n        const {user} = this.state;\n        user[e.target.name] = e.target.value;\n        this.setState({user});\n    }\n    passwordQuality = password => {\n        if (!password) {\n            return null;\n        }\n\n        if (password.length >= this.props.minPasswordLength) {\n            return 100;\n        }\n        return parseInt(password.length / this.props.minPasswordLength * 100, 10);\n    }\n    validate = ({email, password}) => {\n        const errors = {};\n        const {minPasswordLength} = this.props;\n\n        if (!email) {\n            errors.email = \"Email required.\";\n        }\n\n        if (password.length < minPasswordLength) {\n            errors.password = `Password must be at least ${minPasswordLength} characters.`;\n        }\n\n        this.setState({errors});\n\n        const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\n        return formIsValid;\n    }\n    onSubmit = () => {\n        const {user} = this.state;\n        const formIsValid = this.validate(user);\n\n        if (formIsValid) {\n            this.props.onSubmit(user);\n            this.setState({submitted: true});\n        }\n    }\n    render() {\n        const {errors, submitted} = this.state;\n        const {email, password} = this.state.user;\n\n        return (\n            submitted ? <h2>{this.props.confirmationMessage}</h2> :\n            <div>\n                <TextInput\n                  htmlId=\"registration-form-email\"\n                  name=\"email\"\n                  onChange={this.onChange}\n                  label=\"Email\"\n                  value={email}\n                  error={errors.email}\n                  required />\n\n                  <PasswordInput\n                    htmlId=\"registration-form-password\"\n                    name=\"password\"\n                    value={password}\n                    onChange={this.onChange}\n                    quality={this.passwordQuality(password)}\n                    showVisibilityToggle\n                    maxLength={50}\n                    error={errors.password} />\n                    <input type=\"submit\" value=\"Register\" onClick={this.onSubmit} />\n            </div>\n        );\n    }\n}\n\nRegistrationForm.propTypes = {\n    /** Message displayed upon successful submission */\n    confirmationMessage: PropTypes.string,\n    /** Called when form is submitted */\n    onSubmit: PropTypes.func.isRequired,\n    /** Minimum password length */\n    minPasswordLength: PropTypes.number\n};\n\nRegistrationForm.defaultProps = {\n    confirmationMessage: \"Thanks for registering!\",\n    minPasswordLength: 8\n};\n\nexport default RegistrationForm;","examples":[{"name":"ExampleRegistrationForm","description":"","code":"import React from \"react\";\nimport RegistrationForm from \"cc-ss-components/RegistrationForm\";\n\nexport default class ExampleRegistrationForm extends React.Component {\n    onSubmit = user => {\n        console.log(user);\n    }\n    render() {\n        return <RegistrationForm onSubmit={this.onSubmit} />;\n    }\n}"}]},{"name":"TextInput","description":"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker","props":{"htmlId":{"type":{"name":"string"},"required":true,"description":"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing."},"name":{"type":{"name":"string"},"required":true,"description":"Input name. Recommended setting this to match object's property so a single change handler can be used."},"label":{"type":{"name":"string"},"required":true,"description":"Input label"},"type":{"type":{"name":"enum","value":[{"value":"\"text\"","computed":false},{"value":"\"number\"","computed":false},{"value":"\"password\"","computed":false}]},"required":false,"description":"Input type","defaultValue":{"value":"\"text\"","computed":false}},"required":{"type":{"name":"bool"},"required":false,"description":"Mark label with asterisk if set to true","defaultValue":{"value":"false","computed":false}},"onChange":{"type":{"name":"func"},"required":true,"description":"Function to call onChange"},"placeholder":{"type":{"name":"string"},"required":false,"description":"Placeholder to display when empty"},"value":{"type":{"name":"any"},"required":false,"description":"Value"},"error":{"type":{"name":"string"},"required":false,"description":"String to display when error occurs"},"children":{"type":{"name":"node"},"required":false,"description":"Child component to display next to the input"}},"code":"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Label from \"../Label\";\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker */\nfunction TextInput({htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props}) {\n    return (\n        <div style={{marginBottom: 16}}>\n          <Label htmlFor={htmlId} label={label} required={required} />\n          <input id={htmlId} type={type} name={name} placeholder={placeholder} value={value} onChange={onChange} style={error && {border: \"1px solid red\"}} {...props} />\n            {children}\n            {error && <div className=\"error\" style={{color: \"red\"}}>{error}</div>}\n        </div>\n    );\n}\n\nTextInput.propTypes = {\n    /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n    htmlId: PropTypes.string.isRequired,\n    /** Input name. Recommended setting this to match object's property so a single change handler can be used. */\n    name: PropTypes.string.isRequired,\n    /** Input label */\n    label: PropTypes.string.isRequired,\n    /** Input type */\n    type: PropTypes.oneOf([\"text\", \"number\", \"password\"]),\n    /** Mark label with asterisk if set to true */\n    required: PropTypes.bool,\n    /** Function to call onChange */\n    onChange: PropTypes.func.isRequired,\n    /** Placeholder to display when empty */\n    placeholder: PropTypes.string,\n    /** Value */\n    value: PropTypes.any,\n    /** String to display when error occurs */\n    error: PropTypes.string,\n    /** Child component to display next to the input */\n    children: PropTypes.node\n};\n\nexport default TextInput;","examples":[{"name":"ExampleError","description":"Required TextInput with error","code":"import React from \"react\";\nimport TextInput from \"cc-ss-components/TextInput\";\n\n/** Required TextInput with error */\nexport default class ExampleError extends React.Component {\n    render() {\n        return (\n            <TextInput\n              htmlId=\"example-required\"\n              required label=\"First Name\"\n               name=\"firstname\"\n               onChange={() => {}}\n               error=\"First name is required.\" />\n        )\n    }\n}"},{"name":"ExampleOptional","description":"Optional TextInput","code":"import React from \"react\";\nimport TextInput from \"cc-ss-components/TextInput\";\n\n/** Optional TextInput */\nexport default class ExampleOptional extends React.Component {\n    render() {\n    return (\n        <TextInput\n          htmlId=\"example-optional\"\n          label=\"First Name\"\n          name=\"firstname\"\n          onChange={() => {}} />\n        );\n    }\n}"}]},{"name":"TextInputBEM","description":"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.","props":{"htmlId":{"type":{"name":"string"},"required":true,"description":"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing."},"name":{"type":{"name":"string"},"required":true,"description":"Input name. Recommend setting this to match object's property so a single change handler can be used."},"label":{"type":{"name":"string"},"required":true,"description":"Input label"},"type":{"type":{"name":"enum","value":[{"value":"\"text\"","computed":false},{"value":"\"number\"","computed":false},{"value":"\"password\"","computed":false}]},"required":false,"description":"Input type","defaultValue":{"value":"\"text\"","computed":false}},"required":{"type":{"name":"bool"},"required":false,"description":"Mark label with asterisk if set to true","defaultValue":{"value":"false","computed":false}},"onChange":{"type":{"name":"func"},"required":true,"description":"Function to call onChange"},"placeholder":{"type":{"name":"string"},"required":false,"description":"Placeholder to display when empty"},"value":{"type":{"name":"any"},"required":false,"description":"Value"},"error":{"type":{"name":"string"},"required":false,"description":"String to display when error occurs"},"children":{"type":{"name":"node"},"required":false,"description":"Child component to display next to the input"}},"code":"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Label from \"../Label\";\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nfunction TextInput({htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props}) {\n    return (\n        <div className=\"textinput\">\n          <Label htmlFor={htmlId} label={label} required={required} />\n          <input \n            id={htmlId}\n            type={type}\n            name={name}\n            placeholder={placeholder}\n            value={value}\n            onChange={onChange}\n            className={error && \"textinput__input--state-error\"}\n            {...props} />\n            {children}\n            {error && <div className=\"textinput__error\">{error}</div>}\n        </div>\n    )\n}\n\nTextInput.propTypes = {\n    /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n    htmlId: PropTypes.string.isRequired,\n    /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n    name: PropTypes.string.isRequired,\n    /** Input label */\n    label: PropTypes.string.isRequired,\n    /** Input type */\n    type: PropTypes.oneOf([\"text\", \"number\", \"password\"]),\n    /** Mark label with asterisk if set to true */\n    required: PropTypes.bool,\n    /** Function to call onChange */\n    onChange: PropTypes.func.isRequired,\n    /** Placeholder to display when empty */\n    placeholder: PropTypes.string,\n    /** Value */\n    value: PropTypes.any,\n    /** String to display when error occurs */\n    error: PropTypes.string,\n    /** Child component to display next to the input */\n    children: PropTypes.node\n};\n\nexport default TextInput;","examples":[{"name":"ExampleError","description":"Required TextInputBEM with error","code":"import React from \"react\";\nimport TextInputBEM from \"cc-ss-components/TextInputBEM\";\n\n/** Required TextInputBEM with error */\nexport default class ExampleError extends React.Component {\n    render() {\n        return (\n            <TextInputBEM\n            htmlId=\"example-required\"\n            label=\"First Name\"\n            name=\"firstname\"\n            onChange={() => {}}\n            required\n            error=\"First name is required.\" />\n        )\n    }\n}"}]},{"name":"TextInputCSSModules","description":"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.","props":{"htmlId":{"type":{"name":"string"},"required":true,"description":"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing."},"name":{"type":{"name":"string"},"required":true,"description":"Input name. Recommend setting this to match object's property so a single change handler can be used."},"label":{"type":{"name":"string"},"required":true,"description":"Input label"},"type":{"type":{"name":"enum","value":[{"value":"\"text\"","computed":false},{"value":"\"number\"","computed":false},{"value":"\"password\"","computed":false}]},"required":false,"description":"Input type","defaultValue":{"value":"\"text\"","computed":false}},"required":{"type":{"name":"bool"},"required":false,"description":"Mark label with asterisk if set to true","defaultValue":{"value":"false","computed":false}},"onChange":{"type":{"name":"func"},"required":true,"description":"Function to call onChange"},"placeholder":{"type":{"name":"string"},"required":false,"description":"Placeholder to display when empty"},"value":{"type":{"name":"any"},"required":false,"description":"Value"},"error":{"type":{"name":"string"},"required":false,"description":"String to display when error occurs"},"children":{"type":{"name":"node"},"required":false,"description":"Child component to display next to the input"}},"code":"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Label from \"../Label\";\nimport styles from \"./textInput.css\";\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nfunction TextInput({htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props}) {\n    return (\n        <div className={styles.fieldset}>\n          <Label htmlFor={htmlId} label={label} required={required} />\n          <input \n            id={htmlId}\n            type={type}\n            name={name}\n            placeholder={placeholder}\n            value={value}\n            onChange={onChange}\n            className={error && styles.inputError}\n            {...props} />\n            {children}\n            {error && <div className={styles.error}>{error}</div>}\n        </div>\n    )\n}\n\nTextInput.propTypes = {\n    /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n    htmlId: PropTypes.string.isRequired,\n    /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n    name: PropTypes.string.isRequired,\n    /** Input label */\n    label: PropTypes.string.isRequired,\n    /** Input type */\n    type: PropTypes.oneOf([\"text\", \"number\", \"password\"]),\n    /** Mark label with asterisk if set to true */\n    required: PropTypes.bool,\n    /** Function to call onChange */\n    onChange: PropTypes.func.isRequired,\n    /** Placeholder to display when empty */\n    placeholder: PropTypes.string,\n    /** Value */\n    value: PropTypes.any,\n    /** String to display when error occurs */\n    error: PropTypes.string,\n    /** Child component to display next to the input */\n    children: PropTypes.node\n};\n\nexport default TextInput;","examples":[{"name":"ExampleError","description":"Required TextInputCSSModules with error","code":"import React from \"react\";\nimport TextInputCSSModules from \"cc-ss-components/TextInputCSSModules\";\n\n/** Required TextInputCSSModules with error */\nexport default class ExampleError extends React.Component {\n    render() {\n        return (\n            <TextInputCSSModules\n              htmlId=\"example-required\"\n              label=\"First Name\"\n              name=\"firstname\"\n              onChange={() => {}}\n              error=\"First name is required.\"\n              required />\n        )\n    }\n}"}]},{"name":"TextInputStyledComponents","description":"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker","props":{"htmlId":{"type":{"name":"string"},"required":true,"description":"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing."},"name":{"type":{"name":"string"},"required":true,"description":"Input name. Recommended setting this to match object's property so a single change handler can be used."},"label":{"type":{"name":"string"},"required":true,"description":"Input label"},"type":{"type":{"name":"enum","value":[{"value":"\"text\"","computed":false},{"value":"\"number\"","computed":false},{"value":"\"password\"","computed":false}]},"required":false,"description":"Input type","defaultValue":{"value":"\"text\"","computed":false}},"required":{"type":{"name":"bool"},"required":false,"description":"Mark label with asterisk if set to true","defaultValue":{"value":"false","computed":false}},"onChange":{"type":{"name":"func"},"required":true,"description":"Function to call onChange"},"placeholder":{"type":{"name":"string"},"required":false,"description":"Placeholder to display when empty"},"value":{"type":{"name":"any"},"required":false,"description":"Value"},"error":{"type":{"name":"string"},"required":false,"description":"String to display when error occurs"},"children":{"type":{"name":"node"},"required":false,"description":"Child component to display next to the input"}},"code":"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Label from \"../Label\";\nimport styled from \"styled-components\";\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker */\nfunction TextInput({htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props}) {\n    const Error = styled.div`\n      color: red;\n    `;\n\n    const Input = styled.input`\n      border: ${error && \"1px solid red\"};\n      display: block;\n    `;\n\n    const Fieldset = styled.div`\n      margin-bottom: 16px;\n    `;\n\n    return (\n        <Fieldset>\n          <Label htmlFor={htmlId} label={label} required={required} />\n          <Input id={htmlId} type={type} name={name} placeholder={placeholder} value={value} onChange={onChange} {...props} />\n            {children}\n            {error && <Error>{error}</Error>}\n        </Fieldset>\n    );\n}\n\nTextInput.propTypes = {\n    /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n    htmlId: PropTypes.string.isRequired,\n    /** Input name. Recommended setting this to match object's property so a single change handler can be used. */\n    name: PropTypes.string.isRequired,\n    /** Input label */\n    label: PropTypes.string.isRequired,\n    /** Input type */\n    type: PropTypes.oneOf([\"text\", \"number\", \"password\"]),\n    /** Mark label with asterisk if set to true */\n    required: PropTypes.bool,\n    /** Function to call onChange */\n    onChange: PropTypes.func.isRequired,\n    /** Placeholder to display when empty */\n    placeholder: PropTypes.string,\n    /** Value */\n    value: PropTypes.any,\n    /** String to display when error occurs */\n    error: PropTypes.string,\n    /** Child component to display next to the input */\n    children: PropTypes.node\n};\n\nexport default TextInput;","examples":[{"name":"ExampleError","description":"Required TextInput with error","code":"import React from \"react\";\nimport TextInputStyledComponents from \"cc-ss-components/TextInputStyledComponents\";\n\n/** Required TextInput with error */\nexport default class ExampleError extends React.Component {\n    render() {\n        return (\n            <TextInputStyledComponents\n              htmlId=\"example-required\"\n              required\n              label=\"First Name\"\n              name=\"firstname\"\n              onChange={() => {}}\n              error=\"First name is required.\" />\n        )\n    }\n}"}]}]